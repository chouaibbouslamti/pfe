generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt       @id @default(autoincrement())
  createdAt    DateTime?    @map("created_at") @db.DateTime(6)
  email        String       @unique(map: "UK_6dotkott2kjsp8vw4d0m25fb7") @db.VarChar(255)
  firstName    String?      @map("first_name") @db.VarChar(255)
  isActive     Boolean?     @map("is_active") @db.Bit(1)
  lastLogin    DateTime?    @map("last_login") @db.DateTime(6)
  lastName     String?      @map("last_name") @db.VarChar(255)
  password     String       @db.VarChar(255)
  phoneNumber  String?      @map("phone_number") @db.VarChar(255)
  role         UserRole
  username     String       @unique(map: "UK_r43af9ap4edm43mmtq01oddj6") @db.VarChar(50)
  teamId       BigInt?      @map("team_id")
  isApproved   Boolean      @map("is_approved") @db.Bit(1)
  TeamMember   TeamMember[] @relation("TeamMembers")
  team         Team?        @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKfjws1rdruab2bqg7qipoqf65r")
  managedTeam  Team?        @relation("TeamManager")

  @@index([teamId], map: "FKfjws1rdruab2bqg7qipoqf65r")
  @@map("users")
}

model Team {
  id            BigInt         @id @default(autoincrement())
  contact       String?        @db.VarChar(255)
  name          String         @db.VarChar(100)
  managerId     BigInt?        @unique @map("manager_id")
  AlertTeam     AlertTeam[]
  batches       Batch[]
  interventions Intervention[]
  TeamMember    TeamMember[]   @relation("TeamToMember")
  users         User[]
  manager       User?          @relation("TeamManager", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("teams")
}

model TeamMember {
  teamId BigInt @map("team_id")
  userId BigInt @map("user_id")
  user   User   @relation("TeamMembers", fields: [userId], references: [id], onUpdate: Restrict, map: "FKee8x7x5026imwmma9kndkxs36")
  team   Team   @relation("TeamToMember", fields: [teamId], references: [id], onUpdate: Restrict, map: "FKtgca08el3ofisywcf11f0f76t")

  @@id([teamId, userId])
  @@index([userId], map: "FKee8x7x5026imwmma9kndkxs36")
  @@map("team_members")
}

model Hangar {
  id            BigInt         @id @default(autoincrement())
  capacity      Float
  location      String         @db.VarChar(200)
  name          String         @db.VarChar(100)
  status        String         @db.VarChar(255)
  batches       Batch[]
  interventions Intervention[]
  kpis          Kpi[]

  @@map("hangars")
}

model Batch {
  id                    BigInt    @id @default(autoincrement())
  expectedTransportDate DateTime? @map("expected_transport_date") @db.Date
  fertilizerType        String    @map("fertilizer_type") @db.VarChar(255)
  maxStorageDays        Int       @map("max_storage_days")
  stockedDate           DateTime  @map("stocked_date") @db.Date
  hangarId              BigInt    @map("hangar_id")
  teamId                BigInt?   @map("team_id")
  alerts                Alert[]
  hangar                Hangar    @relation(fields: [hangarId], references: [id], onUpdate: Restrict, map: "FK7rcvltqy845815jrjv3eo1h00")
  team                  Team?     @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK99i1ukgv5bhltj2aoua2f5wox")

  @@index([hangarId], map: "FK7rcvltqy845815jrjv3eo1h00")
  @@index([teamId], map: "FK99i1ukgv5bhltj2aoua2f5wox")
  @@map("batches")
}

model Alert {
  id                    BigInt          @id @default(autoincrement())
  createdAt             DateTime        @map("created_at") @db.DateTime(6)
  message               String          @db.VarChar(255)
  type                  String          @db.VarChar(255)
  batchId               BigInt          @map("batch_id")
  acknowledgedAt        DateTime?       @map("acknowledged_at") @db.DateTime(6)
  detectedAt            DateTime        @map("detected_at") @db.DateTime(6)
  estimatedCriticalTime DateTime        @map("estimated_critical_time") @db.DateTime(6)
  resolvedAt            DateTime?       @map("resolved_at") @db.DateTime(6)
  severity              alerts_severity
  status                alerts_status
  title                 String          @db.VarChar(255)
  AlertTeam             AlertTeam[]
  batch                 Batch           @relation(fields: [batchId], references: [id], onUpdate: Restrict, map: "FK82jxh3up3hyupb0l1gfj15f1d")

  @@index([batchId], map: "FK82jxh3up3hyupb0l1gfj15f1d")
  @@map("alerts")
}

model AlertTeam {
  alertId BigInt @map("alert_id")
  teamId  BigInt @map("team_id")
  alert   Alert  @relation(fields: [alertId], references: [id], onUpdate: Restrict, map: "FK5i3j0j2jwbs1mh23qy2mqvtv")
  team    Team   @relation(fields: [teamId], references: [id], onUpdate: Restrict, map: "FKn3cqjilwhador0gs9gmsf7xcu")

  @@id([alertId, teamId])
  @@index([teamId], map: "FKn3cqjilwhador0gs9gmsf7xcu")
  @@map("alert_teams")
}

model Intervention {
  id                     BigInt   @id @default(autoincrement())
  description            String   @db.VarChar(1000)
  expectedResolutionTime DateTime @map("expected_resolution_time") @db.DateTime(6)
  scheduledTime          DateTime @map("scheduled_time") @db.DateTime(6)
  hangarId               BigInt   @map("hangar_id")
  teamId                 BigInt   @map("team_id")
  hangar                 Hangar   @relation(fields: [hangarId], references: [id], onUpdate: Restrict, map: "FK27uleyvuruvslbmvfpa4wkf1d")
  team                   Team     @relation(fields: [teamId], references: [id], onUpdate: Restrict, map: "FKn37mpw1hxvrh5gk91vhopm4r8")

  @@index([hangarId], map: "FK27uleyvuruvslbmvfpa4wkf1d")
  @@index([teamId], map: "FKn37mpw1hxvrh5gk91vhopm4r8")
  @@map("interventions")
}

model Kpi {
  id                 BigInt  @id @map("id")
  averageStorageTime Float   @map("average_storage_time")
  riskyBatches       Int     @map("risky_batches")
  totalBatches       Int     @map("total_batches")
  hangarId           BigInt? @map("hangar_id")
  hangar             Hangar? @relation(fields: [hangarId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK93m5btbybwjl0nruhd6uxjp5f")

  @@index([hangarId], map: "FK93m5btbybwjl0nruhd6uxjp5f")
  @@map("kpi")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model kpi_seq {
  next_val BigInt?

  @@ignore
}

model test {
  id Int @id @default(autoincrement())
}

enum UserRole {
  SUPER_ADMIN
  TEAM_MANAGER
  USER
}

enum alerts_severity {
  CRITICAL
  EMERGENCY
  WARNING
}

enum alerts_status {
  ACKNOWLEDGED
  ACTIVE
  RESOLVED
}
